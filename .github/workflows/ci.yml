name: Mean Bean CI

on:
  push:
    branches:
      - main
      - devel
  pull_request:

jobs:
  # windows:
  #   runs-on: windows-latest
  #   # Windows technically doesn't need this, but if we don't block windows on it
  #   # some of the windows jobs could fill up the concurrent job queue before
  #   # one of the install-cross jobs has started, so this makes sure all
  #   # artifacts are downloaded first.
  #   needs: install-cross
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         depth: 50
  #     - run: tools/ci/set_rust_version.bash ${{ matrix.channel }} ${{ matrix.target }}
  #       shell: bash
  #     - run: tools/ci/build.bash cargo ${{ matrix.target }}
  #       shell: bash
  #     - run: tools/ci/test.bash cargo ${{ matrix.target }}
  #       shell: bash

  # strategy:
  #   fail-fast: true
  #   matrix:
  #     channel: [stable, beta, nightly]
  #     target:
  #       # MSVC
  #       - i686-pc-windows-msvc
  #       - x86_64-pc-windows-msvc
  #       # GNU: You typically only need to test Windows GNU if you're
  #       # specifically targetting it, and it can cause issues with some
  #       # dependencies if you're not so it's disabled by self.
  #       # - i686-pc-windows-gnu
  #       # - x86_64-pc-windows-gnu

  # macos:
  #   runs-on: macos-latest
  #   needs: install-cross
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         depth: 50

  #     - uses: actions/download-artifact@v1
  #       with:
  #         name: cross-apple-darwin
  #         path: /usr/local/bin/

  #     - run: chmod +x /usr/local/bin/cross

  #     - run: tools/ci/set_rust_version.bash ${{ matrix.channel }} ${{ matrix.target }}
  #     - run: tools/ci/build.bash cross ${{ matrix.target }}
  #       # Only test on macOS platforms since we can't simulate the others.
  #     - run: tools/ci/test.bash cross ${{ matrix.target }}
  #       if: matrix.target == 'x86_64-apple-darwin'

  # strategy:
  #   fail-fast: true
  #   matrix:
  #     channel: [stable, beta, nightly]
  #     target:
  #       # macOS
  #       - x86_64-apple-darwin
  #       # iOS
  #       - aarch64-apple-ios
  #       - x86_64-apple-ios

  linux:
    runs-on: ubuntu-22.04
    steps:
      - name: Install cross
        run: |
          cargo install cross --git https://github.com/cross-rs/cross
      - uses: actions/checkout@v2
      - run: tools/ci/set_rust_version.bash ${{ matrix.channel }} ${{ matrix.target }}
      - uses: actions/setup-node@v2
        with:
          node-version: "16"
      - name: Build rust
        run: tools/ci/build.bash $(which cross) ${{ matrix.target }}
      - name: Run tests
        run: |
          tools/ci/test.bash $(which cross) ${{ matrix.target }}
        if: |
          !contains(matrix.target, 'android') &&
          !contains(matrix.target, 'bsd') &&
          !contains(matrix.target, 'solaris') &&
          matrix.target != 'armv5te-unknown-linux-musleabi' &&
          matrix.target != 'sparc64-unknown-linux-gnu'

    strategy:
      fail-fast: false
      matrix:
        channel: [stable, beta]
        target:
          # WASM, off by default as most rust projects aren't compatible yet.
          # - wasm32-unknown-emscripten
          # Linux
          - aarch64-unknown-linux-gnu
          # - aarch64-unknown-linux-musl
          # - arm-unknown-linux-gnueabi
          # - arm-unknown-linux-gnueabihf
          # - arm-unknown-linux-musleabi
          # - arm-unknown-linux-musleabihf
          # - armv5te-unknown-linux-musleabi
          # - armv7-unknown-linux-gnueabihf
          # - armv7-unknown-linux-musleabihf
          # - i586-unknown-linux-gnu
          # - i586-unknown-linux-musl
          # - i686-unknown-linux-gnu
          # - i686-unknown-linux-musl
          # - mips-unknown-linux-gnu
          # - mips-unknown-linux-musl
          # - mips64-unknown-linux-gnuabi64
          # - mips64el-unknown-linux-gnuabi64
          # - mipsel-unknown-linux-gnu
          # - mipsel-unknown-linux-musl
          # - powerpc-unknown-linux-gnu
          # - powerpc64-unknown-linux-gnu
          # - powerpc64le-unknown-linux-gnu
          # - s390x-unknown-linux-gnu
          - x86_64-unknown-linux-gnu
          # - x86_64-unknown-linux-musl
          # - sparc64-unknown-linux-gnu
          # Android
          # - aarch64-linux-android
          # - arm-linux-androideabi
          # - armv7-linux-androideabi
          # - i686-linux-android
          # - x86_64-linux-android
          # *BSD
          # The FreeBSD targets can have issues linking so they are disabled
          # by default.
          # - i686-unknown-freebsd
          # - x86_64-unknown-freebsd
          # - x86_64-unknown-netbsd
          # DragonFly (Doesn't currently work)
          # - x86_64-unknown-dragonfly
          # Solaris
          # - sparcv9-sun-solaris
          # - x86_64-sun-solaris
          # Bare Metal
          # These are no-std embedded targets, so they will only build if your
          # crate is `no_std` compatible.
          # - thumbv6m-none-eabi
          # - thumbv7em-none-eabi
          # - thumbv7em-none-eabihf
          # - thumbv7m-none-eabi
