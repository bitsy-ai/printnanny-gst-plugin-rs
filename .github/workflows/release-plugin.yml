on:
  push:
    tags:
      - "printnanny-gst-plugin-v*"
  workflow_dispatch:
    inputs:
      tag:
        description: Release tag to build
        required: true

name: Publish
env:
  BIN: libgstprintnanny.so printnanny-gst-pipeline
  TAR: ${{  github.ref_name }}
  CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

jobs:
  linux:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        target:
          # WASM, off by default as most rust projects aren't compatible yet.
          # - wasm32-unknown-emscripten
          # Linux
          - aarch64-unknown-linux-gnu
          # - arm-unknown-linux-gnueabi
          # - armv7-unknown-linux-gnueabihf
          # - i686-unknown-linux-gnu
          # - i686-unknown-linux-musl
          # - mips-unknown-linux-gnu
          # - mips64-unknown-linux-gnuabi64
          # - mips64el-unknown-linux-gnuabi64
          # - mipsel-unknown-linux-gnu
          # - powerpc-unknown-linux-gnu
          # - powerpc64-unknown-linux-gnu
          # - powerpc64le-unknown-linux-gnu
          # - s390x-unknown-linux-gnu
          - x86_64-unknown-linux-gnu
          # - x86_64-unknown-linux-mlinuxusl
          # Android
          # - aarch64-linux-android
          # - arm-linux-androideabi
          # - armv7-linux-androideabi
          # - i686-linux-android
          # - x86_64-linux-android
          # *BSD
          # The FreeBSD targets can have issues linking so they are disabled
          # by default.
          # - i686-unknown-freebsd
          # - x86_64-unknown-freebsd
          # - x86_64-unknown-netbsd
          # Solaris
          # - sparcv9-sun-solaris
          # Bare Metal
          # These are no-std embedded targets, so they will only build if your
          # crate is `no_std` compatible.
          # - thumbv6m-none-eabi
          # - thumbv7em-none-eabi
          # - thumbv7em-none-eabihf
          # - thumbv7m-none-eabi
    steps:
      - name: Install cross
        run: |
          cargo install cross --git https://github.com/cross-rs/cross
      - run: |
          sudo apt-get remove libunwind-14-dev
          sudo apt-get -y update
          sudo apt-get install -y --upgrade pkg-config libssl-dev \
            gstreamer1.0-plugins-base gstreamer1.0-plugins-good \
            gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly \
            gstreamer1.0-libav libgstrtspserver-1.0-dev libges-1.0-dev \
            gstreamer1.0-tools gstreamer1.0-x \
            libglib2.0-dev
      - uses: actions/checkout@v2
      - run: tools/ci/set_rust_version.bash stable ${{ matrix.target }}
      - run: tools/ci/build.bash $(which cross) ${{ matrix.target }} RELEASE
      - run: |
          tar -zcvf ${{ env.TAR }}-${{ matrix.target }}.tar.gz --directory=target/${{ matrix.target }}/release ${{ env.BIN }}
          sha256sum ${{ env.TAR }}-${{ matrix.target }}.tar.gz > ${{ env.TAR }}-${{ matrix.target }}.tar.gz.sha256
      - name: Release
        id: upload-release-asset
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            ${{ env.TAR }}-${{ matrix.target }}.tar.gz
            ${{ env.TAR }}-${{ matrix.target }}.tar.gz.sha256
  discord:
    runs-on: ubuntu-22.04
    needs: linux
    steps:
      - name: Send Discord notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.PRINT_NANNY_DISCORD_DEPLOY_WEBHOOK }}
        uses: Ilshidur/action-discord@master
        with:
          args: |
            ðŸ¦€ **Published** {{ EVENT_PAYLOAD.repository.full_name }}@{{ GITHUB_SHA }}
            **Release Notes** ${{ github.event.release.html_url || steps.release.outputs.url }}
